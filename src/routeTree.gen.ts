/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StateDemoRouteImport } from './routes/state-demo'
import { Route as NotesApiRouteImport } from './routes/notes-api'
import { Route as MinimalDemoRouteImport } from './routes/minimal-demo'
import { Route as ContextDemoRouteImport } from './routes/context-demo'
import { Route as AboutRouteImport } from './routes/about'
import { Route as NotesRouteRouteImport } from './routes/notes/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as NotesNoteIdRouteImport } from './routes/notes/$noteId'

const StateDemoRoute = StateDemoRouteImport.update({
  id: '/state-demo',
  path: '/state-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesApiRoute = NotesApiRouteImport.update({
  id: '/notes-api',
  path: '/notes-api',
  getParentRoute: () => rootRouteImport,
} as any)
const MinimalDemoRoute = MinimalDemoRouteImport.update({
  id: '/minimal-demo',
  path: '/minimal-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const ContextDemoRoute = ContextDemoRouteImport.update({
  id: '/context-demo',
  path: '/context-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRouteRoute = NotesRouteRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NotesRouteRoute,
} as any)
const NotesNoteIdRoute = NotesNoteIdRouteImport.update({
  id: '/$noteId',
  path: '/$noteId',
  getParentRoute: () => NotesRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notes': typeof NotesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/context-demo': typeof ContextDemoRoute
  '/minimal-demo': typeof MinimalDemoRoute
  '/notes-api': typeof NotesApiRoute
  '/state-demo': typeof StateDemoRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes/': typeof NotesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/context-demo': typeof ContextDemoRoute
  '/minimal-demo': typeof MinimalDemoRoute
  '/notes-api': typeof NotesApiRoute
  '/state-demo': typeof StateDemoRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes': typeof NotesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/notes': typeof NotesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/context-demo': typeof ContextDemoRoute
  '/minimal-demo': typeof MinimalDemoRoute
  '/notes-api': typeof NotesApiRoute
  '/state-demo': typeof StateDemoRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes/': typeof NotesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notes'
    | '/about'
    | '/context-demo'
    | '/minimal-demo'
    | '/notes-api'
    | '/state-demo'
    | '/notes/$noteId'
    | '/notes/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/context-demo'
    | '/minimal-demo'
    | '/notes-api'
    | '/state-demo'
    | '/notes/$noteId'
    | '/notes'
  id:
    | '__root__'
    | '/'
    | '/notes'
    | '/about'
    | '/context-demo'
    | '/minimal-demo'
    | '/notes-api'
    | '/state-demo'
    | '/notes/$noteId'
    | '/notes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotesRouteRoute: typeof NotesRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContextDemoRoute: typeof ContextDemoRoute
  MinimalDemoRoute: typeof MinimalDemoRoute
  NotesApiRoute: typeof NotesApiRoute
  StateDemoRoute: typeof StateDemoRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/state-demo': {
      id: '/state-demo'
      path: '/state-demo'
      fullPath: '/state-demo'
      preLoaderRoute: typeof StateDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes-api': {
      id: '/notes-api'
      path: '/notes-api'
      fullPath: '/notes-api'
      preLoaderRoute: typeof NotesApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/minimal-demo': {
      id: '/minimal-demo'
      path: '/minimal-demo'
      fullPath: '/minimal-demo'
      preLoaderRoute: typeof MinimalDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/context-demo': {
      id: '/context-demo'
      path: '/context-demo'
      fullPath: '/context-demo'
      preLoaderRoute: typeof ContextDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof NotesRouteRoute
    }
    '/notes/$noteId': {
      id: '/notes/$noteId'
      path: '/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdRouteImport
      parentRoute: typeof NotesRouteRoute
    }
  }
}

interface NotesRouteRouteChildren {
  NotesNoteIdRoute: typeof NotesNoteIdRoute
  NotesIndexRoute: typeof NotesIndexRoute
}

const NotesRouteRouteChildren: NotesRouteRouteChildren = {
  NotesNoteIdRoute: NotesNoteIdRoute,
  NotesIndexRoute: NotesIndexRoute,
}

const NotesRouteRouteWithChildren = NotesRouteRoute._addFileChildren(
  NotesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotesRouteRoute: NotesRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ContextDemoRoute: ContextDemoRoute,
  MinimalDemoRoute: MinimalDemoRoute,
  NotesApiRoute: NotesApiRoute,
  StateDemoRoute: StateDemoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
